-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Latte.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Latte.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Latte.Abs.Ident -> Result
transIdent x = case x of
  Latte.Abs.Ident string -> failure x

transProgram :: Show a => Latte.Abs.Program' a -> Result
transProgram x = case x of
  Latte.Abs.PProgram _ topdefs -> failure x

transIIdent :: Show a => Latte.Abs.IIdent' a -> Result
transIIdent x = case x of
  Latte.Abs.IIdent _ ident -> failure x

transTopDef :: Show a => Latte.Abs.TopDef' a -> Result
transTopDef x = case x of
  Latte.Abs.PFunDef _ type_ iident args block -> failure x
  Latte.Abs.PClassDef _ iident classdef -> failure x
  Latte.Abs.PClassDefExt _ iident1 iident2 classdef -> failure x

transArg :: Show a => Latte.Abs.Arg' a -> Result
transArg x = case x of
  Latte.Abs.PArg _ type_ iident -> failure x

transClassDef :: Show a => Latte.Abs.ClassDef' a -> Result
transClassDef x = case x of
  Latte.Abs.ClassDef _ classelems -> failure x

transClassElem :: Show a => Latte.Abs.ClassElem' a -> Result
transClassElem x = case x of
  Latte.Abs.ClassAttrDef _ type_ classitems -> failure x
  Latte.Abs.ClassMethodDef _ type_ iident args block -> failure x

transClassItem :: Show a => Latte.Abs.ClassItem' a -> Result
transClassItem x = case x of
  Latte.Abs.ClassItem _ iident -> failure x

transBlock :: Show a => Latte.Abs.Block' a -> Result
transBlock x = case x of
  Latte.Abs.SBlock _ stmts -> failure x

transStmt :: Show a => Latte.Abs.Stmt' a -> Result
transStmt x = case x of
  Latte.Abs.SEmpty _ -> failure x
  Latte.Abs.SBStmt _ block -> failure x
  Latte.Abs.SDecl _ type_ items -> failure x
  Latte.Abs.SAss _ expr1 expr2 -> failure x
  Latte.Abs.SIncr _ expr -> failure x
  Latte.Abs.SDecr _ expr -> failure x
  Latte.Abs.SRet _ expr -> failure x
  Latte.Abs.SVRet _ -> failure x
  Latte.Abs.SCond _ expr stmt -> failure x
  Latte.Abs.SCondElse _ expr stmt1 stmt2 -> failure x
  Latte.Abs.SWhile _ expr stmt -> failure x
  Latte.Abs.SFor _ type_ iident expr stmt -> failure x
  Latte.Abs.SExp _ expr -> failure x

transItem :: Show a => Latte.Abs.Item' a -> Result
transItem x = case x of
  Latte.Abs.SNoInit _ iident -> failure x
  Latte.Abs.SInit _ iident expr -> failure x

transType :: Show a => Latte.Abs.Type' a -> Result
transType x = case x of
  Latte.Abs.TInt _ -> failure x
  Latte.Abs.TStr _ -> failure x
  Latte.Abs.TBool _ -> failure x
  Latte.Abs.TVoid _ -> failure x
  Latte.Abs.TArray _ type_ -> failure x
  Latte.Abs.TClass _ iident -> failure x
  Latte.Abs.TFun _ type_ types -> failure x

transExpr :: Show a => Latte.Abs.Expr' a -> Result
transExpr x = case x of
  Latte.Abs.EVar _ iident -> failure x
  Latte.Abs.ELitInt _ integer -> failure x
  Latte.Abs.ELitTrue _ -> failure x
  Latte.Abs.ELitFalse _ -> failure x
  Latte.Abs.EString _ string -> failure x
  Latte.Abs.ECastNull _ type_ -> failure x
  Latte.Abs.EArrayElem _ expr1 expr2 -> failure x
  Latte.Abs.EClassAttr _ expr iident -> failure x
  Latte.Abs.EMethodCall _ expr iident exprs -> failure x
  Latte.Abs.EFunctionCall _ iident exprs -> failure x
  Latte.Abs.EArrayNew _ type_ expr -> failure x
  Latte.Abs.EClassNew _ iident -> failure x
  Latte.Abs.ENeg _ expr -> failure x
  Latte.Abs.ENot _ expr -> failure x
  Latte.Abs.EMul _ expr1 mulop expr2 -> failure x
  Latte.Abs.EAdd _ expr1 addop expr2 -> failure x
  Latte.Abs.ERel _ expr1 relop expr2 -> failure x
  Latte.Abs.EAnd _ expr1 expr2 -> failure x
  Latte.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Latte.Abs.AddOp' a -> Result
transAddOp x = case x of
  Latte.Abs.OPlus _ -> failure x
  Latte.Abs.OMinus _ -> failure x

transMulOp :: Show a => Latte.Abs.MulOp' a -> Result
transMulOp x = case x of
  Latte.Abs.OTimes _ -> failure x
  Latte.Abs.ODiv _ -> failure x
  Latte.Abs.OMod _ -> failure x

transRelOp :: Show a => Latte.Abs.RelOp' a -> Result
transRelOp x = case x of
  Latte.Abs.OLTH _ -> failure x
  Latte.Abs.OLE _ -> failure x
  Latte.Abs.OGTH _ -> failure x
  Latte.Abs.OGE _ -> failure x
  Latte.Abs.OEQU _ -> failure x
  Latte.Abs.ONE _ -> failure x
