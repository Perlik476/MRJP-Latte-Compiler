-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Latte.

module Latte.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = PProgram a [TopDef' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type IIdent = IIdent' BNFC'Position
data IIdent' a = IIdent a Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TopDef = TopDef' BNFC'Position
data TopDef' a
    = PFunDef a (Type' a) (IIdent' a) [Arg' a] (Block' a)
    | PClassDef a (IIdent' a) (ClassDef' a)
    | PClassDefExt a (IIdent' a) (IIdent' a) (ClassDef' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = PArg a (Type' a) (IIdent' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ClassDef = ClassDef' BNFC'Position
data ClassDef' a = ClassDef a [ClassElem' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ClassElem = ClassElem' BNFC'Position
data ClassElem' a
    = ClassAttrDef a (Type' a) [ClassItem' a]
    | ClassMethodDef a (Type' a) (IIdent' a) [Arg' a] (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ClassItem = ClassItem' BNFC'Position
data ClassItem' a = ClassItem a (IIdent' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = SBlock a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = SEmpty a
    | SBStmt a (Block' a)
    | SDecl a (Type' a) [Item' a]
    | SAss a (Expr' a) (Expr' a)
    | SIncr a (Expr' a)
    | SDecr a (Expr' a)
    | SRet a (Expr' a)
    | SVRet a
    | SCond a (Expr' a) (Stmt' a)
    | SCondElse a (Expr' a) (Stmt' a) (Stmt' a)
    | SWhile a (Expr' a) (Stmt' a)
    | SFor a (Type' a) (IIdent' a) (Expr' a) (Stmt' a)
    | SExp a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Item = Item' BNFC'Position
data Item' a
    = SNoInit a (IIdent' a) | SInit a (IIdent' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = TInt a
    | TStr a
    | TBool a
    | TVoid a
    | TArray a (Type' a)
    | TClass a (IIdent' a)
    | TFun a (Type' a) [Type' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EVar a (IIdent' a)
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | EString a String
    | ECastNull a (Type' a)
    | EArrayElem a (Expr' a) (Expr' a)
    | EClassAttr a (Expr' a) (IIdent' a)
    | EMethodCall a (Expr' a) (IIdent' a) [Expr' a]
    | EFuntionCall a (IIdent' a) [Expr' a]
    | EArrayNew a (Type' a) (Expr' a)
    | EClassNew a (IIdent' a)
    | ENeg a (Expr' a)
    | ENot a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = OPlus a | OMinus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = OTimes a | ODiv a | OMod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = OLTH a | OLE a | OGTH a | OGE a | OEQU a | ONE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    PProgram p _ -> p

instance HasPosition IIdent where
  hasPosition = \case
    IIdent p _ -> p

instance HasPosition TopDef where
  hasPosition = \case
    PFunDef p _ _ _ _ -> p
    PClassDef p _ _ -> p
    PClassDefExt p _ _ _ -> p

instance HasPosition Arg where
  hasPosition = \case
    PArg p _ _ -> p

instance HasPosition ClassDef where
  hasPosition = \case
    ClassDef p _ -> p

instance HasPosition ClassElem where
  hasPosition = \case
    ClassAttrDef p _ _ -> p
    ClassMethodDef p _ _ _ _ -> p

instance HasPosition ClassItem where
  hasPosition = \case
    ClassItem p _ -> p

instance HasPosition Block where
  hasPosition = \case
    SBlock p _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    SEmpty p -> p
    SBStmt p _ -> p
    SDecl p _ _ -> p
    SAss p _ _ -> p
    SIncr p _ -> p
    SDecr p _ -> p
    SRet p _ -> p
    SVRet p -> p
    SCond p _ _ -> p
    SCondElse p _ _ _ -> p
    SWhile p _ _ -> p
    SFor p _ _ _ _ -> p
    SExp p _ -> p

instance HasPosition Item where
  hasPosition = \case
    SNoInit p _ -> p
    SInit p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    TInt p -> p
    TStr p -> p
    TBool p -> p
    TVoid p -> p
    TArray p _ -> p
    TClass p _ -> p
    TFun p _ _ -> p

instance HasPosition Expr where
  hasPosition = \case
    EVar p _ -> p
    ELitInt p _ -> p
    ELitTrue p -> p
    ELitFalse p -> p
    EString p _ -> p
    ECastNull p _ -> p
    EArrayElem p _ _ -> p
    EClassAttr p _ _ -> p
    EMethodCall p _ _ _ -> p
    EFuntionCall p _ _ -> p
    EArrayNew p _ _ -> p
    EClassNew p _ -> p
    ENeg p _ -> p
    ENot p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    OPlus p -> p
    OMinus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    OTimes p -> p
    ODiv p -> p
    OMod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    OLTH p -> p
    OLE p -> p
    OGTH p -> p
    OGE p -> p
    OEQU p -> p
    ONE p -> p

