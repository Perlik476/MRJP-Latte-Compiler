-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- | Program to test parser.

module Main where

import Prelude
import System.Environment ( getArgs )
import System.Exit        ( exitFailure, exitSuccess )
import System.IO          ( hPutStrLn, stderr, hPutStr )
import Control.Monad      ( when )

import Latte.Abs
import Latte.Lex   ( Token, mkPosToken )
import Latte.Par   ( pProgram, myLexer )
import Latte.Print ( Print, printTree )
import Latte.Skel  ()

import Data.Map (Map, empty, fromList, union, member, lookup, insert, toList, keys, difference, intersection, elems, (!), intersectionWith)
import Control.Monad.State
import Control.Monad.Except
import Control.Monad.Reader
import qualified Data.List

import Frontend (frontendCheck, showCode, getParseErrPosition)
import TreeTransformer (transformProgram)
import Generator (compile)
import System.Process

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

runFile v p f = putStrLn f >> readFile f >>= run v p

run v p s =
  case p ts of
    Left err -> do
      hPutStrLn stderr "ERROR"
      hPutStrLn stderr "Parse failed."
      hPutStrLn stderr err
      hPutStr stderr $ showCode s (getParseErrPosition err)
      exitFailure
    Right tree -> do
      success <- frontendCheck tree s
      if success then do
        hPutStrLn stderr "OK"
        let ast = transformProgram tree
        liftIO $ print ast
        llvm_file_content <- compile ast
        liftIO $ putStrLn llvm_file_content
        writeFile "out.ll" llvm_file_content
        callCommand "llvm-as out.ll"
        exitSuccess
      else do
        exitFailure
  where
  ts = myLexer s

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 2 pProgram
    "-s":fs    -> mapM_ (runFile 0 pProgram) fs
    fs         -> mapM_ (runFile 2 pProgram) fs

