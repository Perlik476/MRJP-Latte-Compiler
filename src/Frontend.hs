-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- | Program to test parser.

module Main where

import Prelude
import System.Environment ( getArgs )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import Latte.Abs
import Latte.Lex   ( Token, mkPosToken )
import Latte.Par   ( pProgram, myLexer )
import Latte.Print ( Print, printTree )
import Latte.Skel  ()

import Data.Map (Map, empty, fromList, union, member, lookup, insert)
import Control.Monad.State
import Control.Monad.Except
import Control.Monad.Reader
import qualified Data.List

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV v s = when (v > 1) $ putStrLn s

runFile v p f = putStrLn f >> readFile f >>= run v p

run v p s =
  case p ts of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      mapM_ (putStrV v . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      runReaderT (runExceptT (checkProgram tree)) (Data.Map.empty, Data.Map.empty)
      putStrLn "\nParse Successful!"
  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> usage
    "-s":fs    -> mapM_ (runFile 0 pProgram) fs
    fs         -> mapM_ (runFile 2 pProgram) fs

type FMonad = ExceptT Error (ReaderT Env IO) (Maybe Type)

type Error = String

type VEnv = Map Ident Type
type CEnv = Map Ident ClassType
type ClassType = ([ClassElem], Maybe Ident)
type Env = (VEnv, CEnv)
emptyEnv = (Data.Map.empty, Data.Map.empty)

checkProgram :: Program -> FMonad
checkProgram (PProgram _ topDefs) = do
  let idents = map getTopDefIdent topDefs
  checkNoDuplicateIdents idents
  checkMain topDefs
  let venv = functionDeclarationsToVEnv topDefs
  let cenv = classDeclarationsToCEnv topDefs
  let env = (venv, cenv)
  local (const env) (mapM_ checkTopDef topDefs)
  return Nothing

getTopDefIdent :: TopDef -> Ident
getTopDefIdent (PFunDef _ _ ident _ _) = ident
getTopDefIdent (PClassDef _ ident _) = ident
getTopDefIdent (PClassDefExt _ ident _ _) = ident

checkNoDuplicateIdents :: [Ident] -> FMonad
checkNoDuplicateIdents idents = do
  if length idents == length (Data.List.nub idents) then return Nothing else throwError "Duplicate idents"

checkMain :: [TopDef] -> FMonad
checkMain topDefs = do
  let mainFun = filter (\(PFunDef _ _ ident _ _) -> ident == Ident "main") topDefs
  when (null mainFun) $ throwError "No main function"
  let (PFunDef _ t _ args _) = head mainFun
  when (case t of {TInt _ -> False; _ -> True} || args /= []) $ throwError "Wrong main function"
  return Nothing

functionDeclarationsToVEnv :: [TopDef] -> VEnv
functionDeclarationsToVEnv topDefs =
  Data.Map.fromList $ map (\(PFunDef _ t ident args _) -> (ident, t)) (filter isFunDef topDefs)
  where
    isFunDef PFunDef {} = True
    isFunDef _ = False

classDeclarationsToCEnv :: [TopDef] -> CEnv
classDeclarationsToCEnv topDefs =
  Data.Map.fromList $ map f (filter isClassDef topDefs)
  where
    f (PClassDef _ ident (ClassDef _ elems)) = (ident, (elems, Nothing))
    f (PClassDefExt _ ident ident' (ClassDef _ elems)) = (ident, (elems, Just ident'))
    f _ = error "classDeclarationsToCEnv: impossible"

    isClassDef PClassDef {} = True
    isClassDef PClassDefExt {} = True
    isClassDef _ = False


checkTopDef :: TopDef -> FMonad
checkTopDef (PFunDef _ t ident args block) = do
  let argTypes = map (\(PArg _ t _) -> t) args
  let argIdents = map (\(PArg _ _ ident) -> ident) args
  let envFun = \(venv, cenv) -> (Data.Map.union venv $ Data.Map.fromList $ zip argIdents argTypes, cenv)
  local envFun (checkBlock block t)
  return Nothing
checkTopDef (PClassDef _ ident (ClassDef _ elems)) = do
  -- TODO
  return Nothing
checkTopDef (PClassDefExt _ ident ident' (ClassDef _ elems)) = do
  -- TODO
  return Nothing

checkBlock :: Block -> Type -> FMonad
checkBlock (SBlock _ stmts) t = do
  let lastStmt = last stmts
  let stmts' = init stmts
  local (const emptyEnv) (mapM_ (`checkStmt` t) stmts')
  mt' <- checkStmt lastStmt t
  case mt' of
    Nothing -> return Nothing
    Just t' -> if t == t' then return $ Just t else throwError "Wrong return type"

checkStmt :: Stmt -> Type -> FMonad
checkStmt (SEmpty _) _ = return Nothing
checkStmt (SBStmt _ block) t = checkBlock block t
checkStmt (SDecl _ t (item:items)) _ = do
  tryInsertToVEnv ident t
  local (insertToEnv ident t) (checkStmt (SDecl (hasPosition item) t items) t)
  return Nothing
  where
    ident = getIdent item
    getIdent (SNoInit _ ident) = ident
    getIdent (SInit _ ident _) = ident
checkStmt (SAss _ lvalue expr) _ = do
  t <- checkLvalue lvalue
  t' <- checkExpr expr
  unless (sameType t t') $ throwError "Wrong type"
  return Nothing
checkStmt (SIncr _ lvalue) _ = do
  t <- checkLvalue lvalue
  unless (sameType t (TInt 0)) $ throwError "Wrong type"
  return Nothing
checkStmt (SDecr _ lvalue) _ = do
  t <- checkLvalue lvalue
  unless (sameType t (TInt 0)) $ throwError "Wrong type"
  return Nothing
checkStmt (SRet _ expr) t = do
  t' <- checkExpr expr
  unless (sameType t t') $ throwError "Wrong type"
  return $ Just t
checkStmt (SVRet _) t = do
  unless (sameType t (TVoid 0)) $ throwError "Wrong type"
  return $ Just t
checkStmt (SCond _ expr stmt) t = do
  t' <- checkExpr expr
  unless (sameType t' (TBool 0)) $ throwError "Wrong type"
  checkStmt stmt t
  -- TODO evaluate expr when possible
  return Nothing
checkStmt (SCondElse _ expr stmt1 stmt2) t = do
  t' <- checkExpr expr
  unless (sameType t' (TBool 0)) $ throwError "Wrong type"
  checkStmt stmt1 t
  checkStmt stmt2 t
  -- TODO evaluate expr when possible
  return Nothing
checkStmt (SWhile _ expr stmt) t = do
  t' <- checkExpr expr
  unless (sameType t' (TBool 0)) $ throwError "Wrong type"
  checkStmt stmt t
  -- TODO evaluate expr when possible
  return Nothing
checkStmt (SFor _ t' ident expr stmt) t = do
  t'' <- checkExpr expr
  unless (sameType t'' (TArray 0 t')) $ throwError "Wrong type"
  tryInsertToVEnv ident t'
  local (insertToEnv ident t') (checkStmt stmt t)
  return Nothing
checkStmt (SExp _ expr) _ = do
  checkExpr expr
  return Nothing

checkExpr :: Expr -> FMonad
checkExpr (EVar _ ident) = do
  (venv, cenv) <- ask
  case Data.Map.lookup ident venv of
    Just t -> return $ Just t
    Nothing -> throwError "Unknown ident"
checkExpr (ELitInt pos _) = return $ Just $ TInt pos
checkExpr (ELitTrue pos) = return $ Just $ TBool pos
checkExpr (ELitFalse pos) = return $ Just $ TBool pos
checkExpr (EString pos _) = return $ Just $ TStr pos
checkExpr 


tryInsertToVEnv :: Ident -> Type -> FMonad
tryInsertToVEnv ident t = do
  (venv, cenv) <- ask
  when (Data.Map.member ident venv) $ throwError "Duplicate ident"
  when (Data.Map.member ident cenv) $ throwError "Duplicate ident"
  when (sameType t (TVoid 0)) $ throwError "Void type"
  let Just t' = Data.Map.lookup ident venv
  unless (sameType t t') $ throwError "Wrong type"
  return Nothing

insertToEnv :: Ident -> Type -> Env -> Env
insertToEnv ident t (venv, cenv) = (Data.Map.insert ident t venv, cenv)


sameType :: Type -> Type -> Bool
sameType (TInt _) (TInt _) = True
sameType (TStr _) (TStr _) = True
sameType (TBool _) (TBool _) = True
sameType (TVoid _) (TVoid _) = True
sameType (TClass _ ident) (TClass _ ident') = ident == ident'
sameType (TArray _ t) (TArray _ t') = sameType t t'
sameType _ _ = False