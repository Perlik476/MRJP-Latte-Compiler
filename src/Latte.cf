-- programs ------------------------------------------------

entrypoints Program ;

PProgram.   Program ::= [TopDef] ;

-- definitions ---------------------------------------------

PFunDef.      TopDef ::= Type Ident "(" [Arg] ")" Block ;

PClassDef.    TopDef ::= "class" Ident ClassDef ;

PClassDefExt. TopDef ::= "class" Ident "extends" Ident ClassDef ;

separator nonempty TopDef "" ;

PArg.      Arg ::= Type Ident;

separator  Arg "," ;

ClassDef.       ClassDef ::= "{" [ClassElem] "}" ;

ClassAttrDef.   ClassElem ::= Type [ClassItem] ";" ;

ClassItem.      ClassItem ::= Ident ;

separator nonempty ClassItem "," ;

ClassMethodDef. ClassElem ::= Type Ident "(" [Arg] ")" Block ;

separator       ClassElem "" ;

-- statements ----------------------------------------------

SBlock.     Block ::= "{" [Stmt] "}" ;

separator   Stmt "" ;

SEmpty.     Stmt ::= ";" ;

SBStmt.     Stmt ::= Block ;

SDecl.      Stmt ::= Type [Item] ";" ;

SNoInit.    Item ::= Ident ; 

SInit.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

SAss.       Stmt ::= Expr6 "=" Expr  ";" ;

SIncr.      Stmt ::= Expr6 "++"  ";" ;

SDecr.      Stmt ::= Expr6 "--"  ";" ;

SRet.       Stmt ::= "return" Expr ";" ;

SVRet.      Stmt ::= "return" ";" ;

SCond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

SCondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

SWhile.     Stmt ::= "while" "(" Expr ")" Stmt ;

SFor.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExp.       Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

TInt.      Type ::= "int" ;

TStr.      Type ::= "string" ;

TBool.     Type ::= "boolean" ;

TVoid.     Type ::= "void" ;

TArray.    Type ::= Type "[]" ;

TClass.    Type ::= Ident ;

internal   TFun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.         Expr6 ::= Ident ;

ELitInt.      Expr6 ::= Integer ;

ELitTrue.     Expr6 ::= "true" ;

ELitFalse.    Expr6 ::= "false" ;

EString.      Expr6 ::= String ;

ECastNull.    Expr6 ::= "(" Type ")null" ;

EArrayElem.   Expr6 ::= Expr6 "[" Expr "]" ;

EClassAttr.   Expr6 ::= Expr6 "." Ident ;

EMethodCall.  Expr6 ::= Expr6 "." Ident "(" [Expr] ")" ;

EFuntionCall. Expr6 ::= Ident "(" [Expr] ")" ;

EArrayNew.    Expr5 ::= "new" Type "[" Expr "]" ;

EClassNew.    Expr5 ::= "new" Ident ;

ENeg.         Expr5 ::= "-" Expr5 ;

ENot.         Expr5 ::= "!" Expr5 ;

EMul.         Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.         Expr3 ::= Expr3 AddOp Expr4 ;

ERel.         Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.         Expr1 ::= Expr2 "&&" Expr1 ;

EOr.          Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

OPlus.      AddOp ::= "+" ;

OMinus.     AddOp ::= "-" ;

OTimes.     MulOp ::= "*" ;

ODiv.       MulOp ::= "/" ;

OMod.       MulOp ::= "%" ;

OLTH.       RelOp ::= "<" ;

OLE.        RelOp ::= "<=" ;

OGTH.       RelOp ::= ">" ;

OGE.        RelOp ::= ">=" ;

OEQU.       RelOp ::= "==" ;

ONE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

