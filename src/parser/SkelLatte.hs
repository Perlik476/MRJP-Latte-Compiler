-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLatte where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLatte

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLatte.Ident -> Result
transIdent x = case x of
  AbsLatte.Ident string -> failure x

transProgram :: Show a => AbsLatte.Program' a -> Result
transProgram x = case x of
  AbsLatte.PProgram _ topdefs -> failure x

transTopDef :: Show a => AbsLatte.TopDef' a -> Result
transTopDef x = case x of
  AbsLatte.PFunDef _ type_ ident args block -> failure x
  AbsLatte.PClassDef _ ident classdef -> failure x
  AbsLatte.PClassDefExt _ ident1 ident2 classdef -> failure x

transArg :: Show a => AbsLatte.Arg' a -> Result
transArg x = case x of
  AbsLatte.PArg _ type_ ident -> failure x

transClassDef :: Show a => AbsLatte.ClassDef' a -> Result
transClassDef x = case x of
  AbsLatte.ClassDef _ classelems -> failure x

transClassElem :: Show a => AbsLatte.ClassElem' a -> Result
transClassElem x = case x of
  AbsLatte.ClassAttrDef _ type_ ident -> failure x
  AbsLatte.ClassMethodDef _ type_ ident args block -> failure x

transArrayElem :: Show a => AbsLatte.ArrayElem' a -> Result
transArrayElem x = case x of
  AbsLatte.ArrayElem _ lvalue expr -> failure x

transClassAttr :: Show a => AbsLatte.ClassAttr' a -> Result
transClassAttr x = case x of
  AbsLatte.ClassAttr _ lvalue ident -> failure x

transMethodCall :: Show a => AbsLatte.MethodCall' a -> Result
transMethodCall x = case x of
  AbsLatte.MethodCall _ lvalue ident exprs -> failure x

transFunctionCall :: Show a => AbsLatte.FunctionCall' a -> Result
transFunctionCall x = case x of
  AbsLatte.FunctionCall _ ident exprs -> failure x

transLvalue :: Show a => AbsLatte.Lvalue' a -> Result
transLvalue x = case x of
  AbsLatte.LIdent _ ident -> failure x
  AbsLatte.LArrayElem _ arrayelem -> failure x
  AbsLatte.LClassAttr _ classattr -> failure x
  AbsLatte.LMethodCall _ methodcall -> failure x
  AbsLatte.LFuntionCall _ functioncall -> failure x

transBlock :: Show a => AbsLatte.Block' a -> Result
transBlock x = case x of
  AbsLatte.SBlock _ stmts -> failure x

transStmt :: Show a => AbsLatte.Stmt' a -> Result
transStmt x = case x of
  AbsLatte.SEmpty _ -> failure x
  AbsLatte.SBStmt _ block -> failure x
  AbsLatte.SDecl _ type_ items -> failure x
  AbsLatte.SAss _ lvalue expr -> failure x
  AbsLatte.SIncr _ lvalue -> failure x
  AbsLatte.SDecr _ lvalue -> failure x
  AbsLatte.SRet _ expr -> failure x
  AbsLatte.SVRet _ -> failure x
  AbsLatte.SCond _ expr stmt -> failure x
  AbsLatte.SCondElse _ expr stmt1 stmt2 -> failure x
  AbsLatte.SWhile _ expr stmt -> failure x
  AbsLatte.SExp _ expr -> failure x

transItem :: Show a => AbsLatte.Item' a -> Result
transItem x = case x of
  AbsLatte.SNoInit _ ident -> failure x
  AbsLatte.SInit _ ident expr -> failure x

transType :: Show a => AbsLatte.Type' a -> Result
transType x = case x of
  AbsLatte.TInt _ -> failure x
  AbsLatte.TStr _ -> failure x
  AbsLatte.TBool _ -> failure x
  AbsLatte.TVoid _ -> failure x
  AbsLatte.TArray _ type_ -> failure x
  AbsLatte.TClass _ ident -> failure x
  AbsLatte.TFun _ type_ types -> failure x

transExpr :: Show a => AbsLatte.Expr' a -> Result
transExpr x = case x of
  AbsLatte.EVar _ ident -> failure x
  AbsLatte.ELitInt _ integer -> failure x
  AbsLatte.ELitTrue _ -> failure x
  AbsLatte.ELitFalse _ -> failure x
  AbsLatte.EString _ string -> failure x
  AbsLatte.ECastNull _ type_ -> failure x
  AbsLatte.EArrayElem _ arrayelem -> failure x
  AbsLatte.EClassNew _ ident -> failure x
  AbsLatte.EClassAttr _ classattr -> failure x
  AbsLatte.EMethodCall _ methodcall -> failure x
  AbsLatte.EFuntionCall _ functioncall -> failure x
  AbsLatte.ENeg _ expr -> failure x
  AbsLatte.ENot _ expr -> failure x
  AbsLatte.EMul _ expr1 mulop expr2 -> failure x
  AbsLatte.EAdd _ expr1 addop expr2 -> failure x
  AbsLatte.ERel _ expr1 relop expr2 -> failure x
  AbsLatte.EAnd _ expr1 expr2 -> failure x
  AbsLatte.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsLatte.AddOp' a -> Result
transAddOp x = case x of
  AbsLatte.OPlus _ -> failure x
  AbsLatte.OMinus _ -> failure x

transMulOp :: Show a => AbsLatte.MulOp' a -> Result
transMulOp x = case x of
  AbsLatte.OTimes _ -> failure x
  AbsLatte.ODiv _ -> failure x
  AbsLatte.OMod _ -> failure x

transRelOp :: Show a => AbsLatte.RelOp' a -> Result
transRelOp x = case x of
  AbsLatte.OLTH _ -> failure x
  AbsLatte.OLE _ -> failure x
  AbsLatte.OGTH _ -> failure x
  AbsLatte.OGE _ -> failure x
  AbsLatte.OEQU _ -> failure x
  AbsLatte.ONE _ -> failure x
