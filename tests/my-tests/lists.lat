class List {
  int head;
  List tail;
}

List newList(int head, List tail) {
  List xs = new List;
  xs.head = head;
  xs.tail = tail;
  return xs;
}

List fromArray(int[] xs) {
  if (xs.length == 0)
    return (List)null;
  else {
    List ys;
    for (int x : xs) {
      ys = newList(x, ys);
    }
    return ys;
  }
}

int[] toArray(List xs) {
  int n = length(xs);
  int[] ys = new int[n];
  int i = 0;
  while (xs != (List)null) {
    ys[i] = xs.head;
    xs = xs.tail;
    i++;
  }
  return ys;
}

List reverse(List xs) {
  if (xs == (List)null)
    return (List)null;
  else {
    return concat(reverse(xs.tail), newList(xs.head, (List)null));
  }
}

int length(List xs) {
  if (xs == (List)null)
    return 0;
  else
    return 1 + length(xs.tail);
}

List concat(List xs, List ys) {
  if (xs == (List)null)
    return ys;
  else
    return newList(xs.head, concat(xs.tail, ys));
}

List fib(int n) {
  if (n == 0)
    return (List)null;
  else if (n == 1)
    return newList(0, (List)null);
  else if (n == 2)
    return newList(1, newList(0, (List)null));
  else {
    List xs = fib(n - 1);
    return newList(xs.head + xs.tail.head, xs);
  }
}

List sum(List xs, List ys) {
  if (xs == (List)null)
    return ys;
  else if (ys == (List)null)
    return xs;
  else
    return newList(xs.head + ys.head, sum(xs.tail, ys.tail));
}

List nats(int n) {
  return reverse(nats_(n));
}

List nats_(int n) {
  if (n == 0)
    return (List)null;
  else
    return newList(n, nats_(n - 1));
}


int main() {
  int n = 10;
  for (int x : toArray(reverse(sum(fib(n), nats(n))))) {
    printInt(x);
  }
  return 0;
}